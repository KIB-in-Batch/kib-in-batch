"""
rem mkstandalone.py
rem    * Script to build a standalone executable for the KIB in Batch project.
rem    * Compiles the project into one executable file.
rem    * Licensed under the GPL-2.0-only.
rem Copyright (C) 2025 benja2998
rem
rem This program is free software; you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation; ONLY version 2 of the License.
rem
rem This program is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem
rem You should have received a copy of the GNU General Public License
rem along with this program; if not, write to the Free Software
rem Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

import os
import sys

header = """@echo off
chcp 65001 >nul

rem kib-standalone.bat
rem Standalone executable for the KIB in Batch project
rem DO NOT MODIFY THIS FILE! IT IS GENERATED BY 'mkstandalone.py'.
set "KIB_HOME=%TEMP%\\kib"
rmdir /s /q "%KIB_HOME%" 2>nul
:: Boilerplate directory creation crap.
if not exist "%KIB_HOME%" mkdir "%KIB_HOME%"
if not exist "%KIB_HOME%\\bin" mkdir "%KIB_HOME%\\bin"
if not exist "%KIB_HOME%\\lib" mkdir "%KIB_HOME%\\lib"
if not exist "%KIB_HOME%\\include" mkdir "%KIB_HOME%\\include"
if not exist "%KIB_HOME%\\share" mkdir "%KIB_HOME%\\share"
if not exist "%KIB_HOME%\\libexec" mkdir "%KIB_HOME%\\libexec"
if not exist "%KIB_HOME%\\share\\guide" mkdir "%KIB_HOME%\\share\\guide"
if not exist "%KIB_HOME%\\lib\\posix" mkdir "%KIB_HOME%\\lib\\posix"
if not exist "%KIB_HOME%\\templates" mkdir "%KIB_HOME%\\templates"
:: Now we end that boilerplate directory creation.
"""

def escape_contents(contents):
    # This is the one function that's the reason why I am using Python for this.
    # Do a bunch of replacements, but skip escaping for characters that are
    # inside double-quoted substrings, except for % which must always be escaped.
    replacements = {
        '^': '^^',
        '&': '^&',
        '|': '^|',
        '<': '^<',
        '>': '^>',
        '(': '^(',
        ')': '^)'
    }

    def escape_line(line):
        out = []
        in_quotes = False
        for ch in line:
            if ch == '"':
                in_quotes = not in_quotes
                out.append(ch)
                continue
            if ch == '%':
                # Always escape % regardless of being inside quotes
                out.append('%%')
                continue
            if in_quotes:
                out.append(ch)
            else:
                out.append(replacements.get(ch, ch))
        return ''.join(out).rstrip('\r\n').rstrip()

    for i in range(len(contents)):
        contents[i] = escape_line(contents[i])
    return contents


def main():
    # Make the build directory if it doesn't exist.
    if not os.path.exists("build"):
        os.mkdir("build", 0o755)
    src_dir = os.path.join(os.getcwd(), 'src')
    if not os.path.isdir(src_dir):
        print(f"Source directory '{src_dir}' does not exist.")
        sys.exit(1)
    
    files = []
    for root, _, filenames in os.walk(src_dir):
        for filename in filenames:
            if filename.endswith(('.bat', '.cmd', '.md', '.txt', '.h')):
                files.append(os.path.join(root, filename))
    if not files:
        print("No valid files found in the source directory.")
        sys.exit(1)
    
    batch_file = 'build/kib-standalone.bat'
    with open(batch_file, 'w', encoding='utf-8') as f:
        f.write(header)

    for file in files:
        with open(file, 'r', encoding='utf-8') as f:
            contents = f.readlines()
        contents = escape_contents(contents)
        with open(batch_file, 'a', encoding='utf-8') as f:
            f.write(f'(\n')
            for line in contents:
                if line == '':
                    f.write(f'    echo.\n')
                else:
                    f.write(f'    echo {line.rstrip()}\n')
            f.write(f') > "%KIB_HOME%\\{os.path.relpath(file, src_dir)}"\n')

    with open(batch_file, 'a', encoding='utf-8') as f:
        f.write('call "%KIB_HOME%\\kib_in_batch.bat"\n')
    print(f"Standalone batch file '{batch_file}' created successfully.")

if __name__ == '__main__':
    main()
