name: CI/CD

permissions:
  contents: write 
  checks: write

on: [push, pull_request]

jobs:
  build-and-deploy:
    runs-on: windows-2025
    env:
      POWERSHELL_ERROR_ACTION: Stop
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize log collection
        shell: powershell
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          Add-Content -Path $env:GITHUB_ENV -Value "CI_TS=$timestamp"
          New-Item -ItemType Directory -Path ci_logs -Force | Out-Null
          "CI run started at $timestamp (run id: $env:GITHUB_RUN_ID)" | Out-File -FilePath "ci_logs/session_$timestamp.log" -Encoding utf8

      - name: Install and validate KiB
        shell: cmd
        env:
          CI_TS: ${{ env.CI_TS }}
        run: |
          set timestamp=%CI_TS%
          echo 1 | src\kib_in_batch.bat automated > ci_logs\install_%timestamp%.log 2>&1
          if errorlevel 1 (
            echo Installer failed with exit code %errorlevel% >> ci_logs\install_%timestamp%.log
            exit /b %errorlevel%
          )
          if exist "%APPDATA%\kib_in_batch\errors.log" (
            type "%APPDATA%\kib_in_batch\errors.log" >> ci_logs\install_errors_%timestamp%.log
          ) else (
            echo No installer error log found >> ci_logs\install_errors_%timestamp%.log
          )

      - name: Test kib-pkg.bat
        shell: cmd
        env:
          CI_TS: ${{ env.CI_TS }}
        run: |
          set timestamp=%CI_TS%
          set kibPath=%USERPROFILE%\kib\usr\bin

          echo Testing package manager... > ci_logs\packages_%timestamp%.log

          %kibPath%\kib-pkg.bat update >> ci_logs\packages_%timestamp%.log 2>&1
          if errorlevel 1 (
            echo Update failed with exit code %errorlevel% >> ci_logs\packages_%timestamp%.log
            exit /b %errorlevel%
          )

          echo y | %kibPath%\kib-pkg.bat install hello-world >> ci_logs\packages_%timestamp%.log 2>&1
          if errorlevel 1 (
            echo Install hello-world failed with exit code %errorlevel% >> ci_logs\packages_%timestamp%.log
            exit /b %errorlevel%
          )

          %kibPath%\kib-pkg.bat list >> ci_logs\packages_%timestamp%.log 2>&1

          echo y | %kibPath%\kib-pkg.bat remove hello-world >> ci_logs\packages_%timestamp%.log 2>&1
          if errorlevel 1 (
            echo Remove hello-world failed with exit code %errorlevel% >> ci_logs\packages_%timestamp%.log
            exit /b %errorlevel%
          )

          for %%p in (bat make file) do (
            echo y | %kibPath%\kib-pkg.bat install %%p >> ci_logs\packages_%timestamp%.log 2>&1
            if errorlevel 1 (
              echo Install %%p failed >> ci_logs\packages_%timestamp%.log
              exit /b %errorlevel%
            )

            %kibPath%\kib-pkg.bat list >> ci_logs\packages_%timestamp%.log 2>&1

            if "%%p"=="bat" %kibPath%\bat.exe --help >> ci_logs\packages_%timestamp%.log 2>&1
            if "%%p"=="make" %kibPath%\make --version >> ci_logs\packages_%timestamp%.log 2>&1
            if "%%p"=="file" %USERPROFILE%\kib\usr\lib\file\file.exe --version >> ci_logs\packages_%timestamp%.log 2>&1

            echo y | %kibPath%\kib-pkg.bat remove %%p >> ci_logs\packages_%timestamp%.log 2>&1
            if errorlevel 1 (
              echo Remove %%p failed >> ci_logs\packages_%timestamp%.log
              exit /b %errorlevel%
            )
          )

          if exist "%APPDATA%\kib_in_batch\errors.log" (
            type "%APPDATA%\kib_in_batch\errors.log" >> ci_logs\packages_errors_%timestamp%.log
          ) else (
            echo No installer error log found >> ci_logs\packages_errors_%timestamp%.log
          )
  
      - name: Test BusyBox
        shell: powershell
        env:
          CI_TS: ${{ env.CI_TS }}
        run: |
          $ErrorActionPreference = 'Stop'
          $timestamp = $env:CI_TS
          try {
            & "$env:USERPROFILE\kib\usr\bin\busybox.exe" --help 2>&1 | Tee-Object -FilePath "ci_logs/busybox_$timestamp.log"
            if ($LASTEXITCODE -ne 0) { throw "busybox test failed ($LASTEXITCODE)" }

            $errFile = Join-Path $env:APPDATA 'kib_in_batch\errors.log'
            if (Test-Path $errFile) {
              Get-Content $errFile | Out-File -FilePath "ci_logs/busybox_errors_$timestamp.log" -Append -Encoding utf8
            }
          } catch {
            $_ | Out-String | Out-File -FilePath "ci_logs/busybox_exception_$timestamp.log" -Append -Encoding utf8
            throw
          }

      - name: Test other tools
        shell: powershell
        env:
          CI_TS: ${{ env.CI_TS }}
        run: |
          $ErrorActionPreference = 'Stop'
          $timestamp = $env:CI_TS
          $log = "ci_logs/other_tools_$timestamp.log"
          try {
            & "$env:USERPROFILE\kib\usr\bin\bash.exe" -c "echo 'Hello world!'" 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "bash failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\sh.exe" -c "echo 'Hello world!'" 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "sh failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\lsb_release.bat" --help 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "lsb_release failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\uname.bat" -a 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "uname failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\whoami.bat" 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "whoami failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\which.bat" cmd -a 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "which failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\rm.exe" -rf test.txt 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "rm failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\kibfetch.bat" 2>&1 | Tee-Object -FilePath $log -Append
            if ($LASTEXITCODE -ne 0) { throw "kibfetch failed ($LASTEXITCODE)" }

            & "$env:USERPROFILE\kib\usr\bin\ls.exe" "$env:USERPROFILE\kib\usr\bin" 2>&1 | Tee-Object -FilePath $log -Append
            & "$env:USERPROFILE\kib\usr\bin\ls.exe" "$env:USERPROFILE\kib\bin\" 2>&1 | Tee-Object -FilePath $log -Append
            & "$env:USERPROFILE\kib\usr\bin\ls.exe" "$env:USERPROFILE\kib\" -lahF 2>&1 | Tee-Object -FilePath $log -Append

            $errFile = Join-Path $env:APPDATA 'kib_in_batch\errors.log'
            if (Test-Path $errFile) {
              Get-Content $errFile | Out-File -FilePath "ci_logs/other_tools_errors_$timestamp.log" -Append -Encoding utf8
            }
          } catch {
            $_ | Out-String | Out-File -FilePath "ci_logs/other_tools_exception_$timestamp.log" -Append -Encoding utf8
            throw
          }

      - name: Upload all logs
        uses: actions/upload-artifact@v4
        with:
          name: kib-ci-logs-${{ github.run_id }}
          path: ci_logs/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly-${{ github.sha }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
